---
import { GraphMap } from '../classes/graphMap.class';
import { MAP_CENTER, TILE_TYPES } from '../constants/general.constants';
import type { MapCell } from '../types/general.types';

const localMap = new GraphMap();

const { noteTitle } = Astro.props;

const currentCell: MapCell = {
  tile: TILE_TYPES.PLAYER,
  text: noteTitle,
  url: '#',
  urlActive: true,
  exists: true,
  target: undefined,
  position: MAP_CENTER,
};

localMap.setCell(MAP_CENTER.y, MAP_CENTER.x, currentCell);

// TODO: Convertir los enlaces en celdas del mapa.
// TODO: Distribuir las celdas del mapa de forma aleatoria.
// TODO: Si la profundidad es 1 se generarán más cerca del centro del mapa.
// TODO: Si la profundidad es 2 se generarán más lejos del centro del mapa.
// TODO: Las referencias que no existan serán UNKNOWN y tendrán el enlace inactivo.
// TODO: Conectar las celdas con líneas a partir de la propiedad target.
// TODO: Mejorar la URL.
---

<div class="flex flex-col pt-4 px-8 border-4 h-full relative">
  <p class="text-2xl font-bold text-center mb-4">MAP</p>
  <p class="text-xl absolute top-0 left-0 translate-x-28 translate-y-56">
    Próximamente...
  </p>
  <div class="items-center blur-sm">
    {
      localMap.getMap().map(row => (
        <div class="flex flex-row justify-between">
          {row.map(cell => (
            <a
              href={cell.url.replace('.md', '')}
              title={cell.text}
              class={`w-4 h-6 text-sm text-center ${cell.urlActive ? '' : 'opacity-50 pointer-events-none'}`}
            >
              {cell.tile}
            </a>
          ))}
        </div>
      ))
    }
  </div>
</div>
