---
import type { MarkdownHeading } from 'astro';

interface Props {
  headings: MarkdownHeading[];
}

interface HeadingNode extends MarkdownHeading {
  children: HeadingNode[];
}

const { headings } = Astro.props;

const buildHierarchy = (
  headings: MarkdownHeading[],
  headingTree: HeadingNode[] = []
) =>
  headings.reduce(
    (acc, heading) => (
      (headingTree.length = heading.depth),
      (headingTree[heading.depth - 1]?.children || acc).push(
        (headingTree[heading.depth] = { ...heading, children: [] })
      ),
      acc
    ),
    [] as HeadingNode[]
  );

const headingTree = buildHierarchy(headings);
---

<div class="flex flex-col gap-2 p-4 border-4 h-full">
  <p class="text-2xl font-bold text-center">OUTLINE</p>
  <div class="flex flex-col gap-2">
    {
      (function renderHeadings(headings: HeadingNode[]) {
        return (
          <div class="flex flex-col">
            {headings.map(heading => (
              <div class="flex flex-col">
                <div class="flex items-center gap-2">
                  <a href={`#${heading.slug}`} class="hover:text-blue-600">
                    {heading.text}
                  </a>
                  {heading.children.length > 0 && (
                    <button
                      class="collapse-btn w-4 h-4 flex items-center justify-center border rounded hover:bg-gray-100"
                      onclick="this.parentElement.nextElementSibling?.classList.toggle('hidden')"
                    >
                      -
                    </button>
                  )}
                </div>
                {heading.children.length > 0 && (
                  <div class="ml-4">{renderHeadings(heading.children)}</div>
                )}
              </div>
            ))}
          </div>
        );
      })(headingTree)
    }
  </div>
</div>
